var estudiantes = ["marcos", "david", "rosa", "daniel"]

function saludar (estudiante){
    console.log(`Hola, ${estudiante}`);
}

while (estudiantes.length > 0) {
    var estudiante = estudiantes.shift();
    saludar(estudiante);
}

//metafora para entender:  Ambos ciclos se ocupan el for y el while. Con for podemos definir un fin de intentos y con el while mientras se cumpla que lo siga haciendo. Es como decir en while ser칤a, seguir cocinando el pollo mientras siga crudo, realmente no sabemos cuando estar치 cocinado. Si us치ramos for podr칤a quedarnos crudo o muy quemado, a menos que fueras un super experto.

/*  Playground: En este desaf칤o tu funci칩n solution recibir치 3 par치metros:

estudiantes: un array de strings con varios nombres de estudiantes.
deathCount: un n칰mero entero.
nuevo: un string con el nombre de un nuevo estudiante (que no aparec칤a antes en el array).
Tu funci칩n debe retornar un array de elementos con las siguientes indicaciones:

Si el par치metro deathCount es igual a 0, debes retornar un array con los mismos elementos que ten칤a el array de estudiantes y agregando el elemento nuevo al final.

Si el par치metro deathCount es mayor a 0, debes retornar un array con los mismos elementos del array estudiantes pero eliminando la cantidad de estudiantes que indica el n칰mero deathCount y agregando el elemento nuevo al final.

游눠 Aclaraci칩n: NO debes eliminar TODOS los elementos del array original de estudiantes, sino eliminar la cantidad de estudiantes que indica el n칰mero deathCount.

Ejemplo 1:

El array estudiantes contiene los elementos "Nico" y "Zulle". El n칰mero deathCount es igual a 0. Y el nuevo estudiante es "Santi". Al deathCount ser igual a 0, "Nico" y "Zulle" se quedan. Y agregamos "Santi" al final.*/

function solution(estudiantes, deathCount, nuevo) {
    while (deathCount > 0) {
      estudiantes.pop();
      deathCount--;
    }
    estudiantes.push(nuevo);
    return estudiantes;
}